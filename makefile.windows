# NOTE: you can use regular makefile "make debug" or "make release" with LTO if you are using MinGW or cygwin.

STD = -std=c2x
CC = gcc
RELEASE ?= 0
DEFINES ?=

main_flags = -Wall -Wextra -Werror -pedantic -pedantic-errors -Wsign-conversion -Wformat=2 -Wshadow -Wvla -fstack-protector-all -Wundef -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wnested-externs -Winline -Wdisabled-optimization -Wunreachable-code -Wchar-subscripts

# you have to remove sanitizers for environments like cygwin and w64devkit.
debug_flags = $(main_flags) -D_FORTIFY_SOURCE=2

# you have to remove -flto for environments like w64devkit.
release_flags = $(main_flags) -O3 -ffast-math -march=native -DNDEBUG

objects = obj/main.o obj/ttyterm.o obj/terminfo.o obj/tcaps.o obj/unibilium.o obj/uninames.o obj/uniutil.o
target = u

ifeq ($(CC), gcc)
	release_flags += -s
endif

ifeq ($(RELEASE), 1)
	CFLAGS ?= $(release_flags)
	cc_with_flags = $(CC) $(STD) $(CFLAGS) $(DEFINES)
else
	CFLAGS ?= $(debug_flags)
	cc_with_flags = $(CC) $(STD) $(CFLAGS) $(DEFINES)
endif

TERMINFO_DIRS=""
TERMINFO=""
TTYTERM_DEFINES ?= -DTERMINFO='$(TERMINFO)' -DTERMINFO_DIRS='$(TERMINFO_DIRS)'

$(target) : $(objects)
	$(cc_with_flags) -o $(target) $(objects)

obj/%.o: lib/%.c
	$(cc_with_flags) $(TTYTERM_DEFINES) -c $< -o $@

obj/%.o: %.c
	$(cc_with_flags) -c $< -o $@

# Release build
release:
	make RELEASE=1

# Debug build
debug :
	make -B RELEASE=0

# Cross compilation
ZIG_TARGET ?= aarch64-windows-gnu
zig:
	zig cc -target $(ZIG_TARGET) $(TTYTERM_DEFINES) main.c ttyterm.c terminfo.c tcaps.c lib/unibilium.c lib/uninames.c lib/uniutil.c

# Clean-up
.PHONY: clean
clean :
	rm $(target) $(objects)
